package com.neverket.telegram_approval_bot.service;

import com.neverket.telegram_approval_bot.bot.MessageSender;
import com.neverket.telegram_approval_bot.model.ApprovalRoute;
import com.neverket.telegram_approval_bot.model.ApprovalStatus;
import com.neverket.telegram_approval_bot.model.Request;
import com.neverket.telegram_approval_bot.model.User;
import com.neverket.telegram_approval_bot.repository.ApprovalRouteRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class NotificationService {

    private final ApprovalRouteRepository approvalRouteRepository;
    private final MessageSender messageSender;

    public void notifyApprovers(Request request) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏
        List<ApprovalRoute> routes = approvalRouteRepository.findByRequest(request);

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
        routes.stream()
                .collect(Collectors.groupingBy(ApprovalRoute::getLevel))
                .forEach((level, levelRoutes) -> {
                    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–∞—Ö–æ–¥–∏–º —Ç–µ—Ö, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –æ–¥–æ–±—Ä—è—Ç—å
                    levelRoutes.stream()
                            .filter(route -> route.getApprovalStatus() == ApprovalStatus.PENDING)
                            .forEach(route -> {
                                User reviewer = route.getReviewer();
                                sendApprovalNotification(reviewer, request, level);
                            });
                });
    }

    private void sendApprovalNotification(User reviewer, Request request, int level) {
        String message = String.format(
                "üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ (–£—Ä–æ–≤–µ–Ω—å %d):\n\n" +
                        "ID: %d\n" +
                        "–ê–≤—Ç–æ—Ä: @%s\n" +
                        "–¢–µ–∫—Å—Ç: %s\n\n" +
                        "–ö–æ–º–∞–Ω–¥—ã:\n" +
                        "/approve_%d - –û–¥–æ–±—Ä–∏—Ç—å\n" +
                        "/reject_%d - –û—Ç–∫–ª–æ–Ω–∏—Ç—å\n" +
                        "/request_changes_%d - –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫—É",
                level,
                request.getId(),
                request.getUser().getUserName(),
                request.getText(),
                request.getId(),
                request.getId(),
                request.getId()
        );

        messageSender.sendMessage(reviewer.getTelegramId(), message);
    }

    public void notifyRequester(Request request, User reviewer, ApprovalStatus status) {
        String statusMessage = switch (status) {
            case APPROVED -> "–æ–¥–æ–±—Ä–µ–Ω–∞";
            case REJECTED -> "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞";
            case CHANGES_REQUESTED -> "—Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏";
            default -> "–∏–∑–º–µ–Ω–µ–Ω–∞";
        };

        String message = String.format(
                "üì¢ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ #%d –∏–∑–º–µ–Ω–µ–Ω:\n\n" +
                        "–†–µ–≤—å—é–≤–µ—Ä: @%s\n" +
                        "–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: %s\n" +
                        "–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏: %s",
                request.getId(),
                reviewer.getUserName(),
                statusMessage,
                request.getText()
        );

        messageSender.sendMessage(request.getUser().getTelegramId(), message);
    }
}
